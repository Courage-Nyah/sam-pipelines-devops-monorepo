AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  pipeline-trigger

  Sample SAM Template for pipeline-trigger

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  PipelineName:
    Type: String
    Description: The name of the pipeline to create
    Default: ""

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Role
          Value: aws-sam-pipeline-codebuild-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
#        - PolicyName: CodeBuildArtifactsBucket
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: Allow
#                Action:
#                  - "s3:GetObject"
#                  - "s3:GetObjectVersion"
#                  - "s3:PutObject"
#                Resource:
#                  - !Sub "arn:aws:s3:::${PipelineArtifactsBucket}/*"
        - PolicyName: AssumeStagePipExecutionRoles
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/Role: pipeline-execution-role
        - PolicyName: CreatePipeline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:CreatePipeline"
                Resource:
                  - "arn:aws:codepipeline:::*"
  PipelineTriggerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handler/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
      - Statement:
        - Sid: PipelineTriggerPolicy
          Effect: Allow
          Action:
          - codepipeline:*
          - codebuild:*
          Resource: '*'
      Events:
        PipelineTrigger:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
  PipelineTriggerCreatePipelineTask:
    Type: AWS::CodeBuild::Project # More info about this Resource: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
    Properties:
      Name: create_pipeline
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ENV_PIPELINE_NAME
            Value: !Ref PipelineName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: "version: 0.2\nphases:\n  install:\n    runtime-versions:\n      python: 3.8\n    commands:\n      - pip install --upgrade pip\n      - pip install --upgrade awscli aws-sam-cli\n  build:\n    commands:\n      - . ./assume-role.sh ${ENV_PIPELINE_EXECUTION_ROLE} deploy\n      - echo ${ENV_PIPELINE_NAME}\n      - sam deploy -t codepipeline.yaml --stack-name ${ENV_PIPELINE_NAME} --capabilities=CAPABILITY_IAM --parameter-overrides ParameterKey=SubFolderName,ParameterValue=\"${ENV_PIPELINE_NAME}\""

  PipelineConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
#      BucketName: !Join [ "-", [ !Ref Environment, "sam-artifacts" ] ]
      BucketName: "poc-sam-artifacts"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteDevArtifactsAfterOneDay
            Status: "Enabled"
            ExpirationInDays: 1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
#      Tags:
#        - Key: "ENVIRONMENT"
#          Value: !Ref Environment
  PipelineConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PipelineConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref PipelineConfigBucket
                - /*
            Principal: '*'
            Condition:
              StringEquals:
                aws:ResourceTag/Role: pipeline-execution-role

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PipelineTriggerApi:
    Description: "API Gateway endpoint URL for Prod stage for Pipeline Trigger function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
